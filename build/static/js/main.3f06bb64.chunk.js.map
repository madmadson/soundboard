{"version":3,"sources":["sounds.js","App.js","serviceWorker.js","index.js"],"names":["door","icon","samples","swamp","cave","creepy","blackKnight","App","audio","undefined","soundPlaying","onFigureclick","e","clickedSound","target","dataset","item","file","sounds","Math","floor","random","length","Audio","play","console","log","playRandomSound","pause","listOfSounds","Object","values","map","it","key","className","onClick","data-item","alt","src","data-testid","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAAe,G,KAAA,CACbA,KAAM,CACJC,KAAM,OACNC,QAAS,CAAC,gBAAiB,oBAE7BC,MAAO,CACLF,KAAM,QACNC,QAAS,CAAC,cAEZE,KAAM,CACJH,KAAM,OACNC,QAAS,CAAC,WAAY,cAExBG,OAAQ,CACNJ,KAAM,SACNC,QAAS,CAAC,aAAc,kBAE1BI,YAAa,CACXL,KAAM,cACNC,QAAS,CAAC,oBC6BCK,MA3Cf,WACE,IAAIC,OAAQC,EACRC,GAAe,EAoBbC,EAAgB,SAACC,GAErB,IAAMC,EAAeD,EAAEE,OAAOC,QAAQC,KAClCH,IAAiBH,EArBC,SAACM,GACvB,IAAMC,EACJC,EAAOF,GAAMd,QACXiB,KAAKC,MAAMD,KAAKE,SAAWH,EAAOF,GAAMd,QAAQoB,UAEpDd,EAAQ,IAAIe,MAAJ,iBAAoBN,KAEtBO,OACNd,GAAe,EACfe,QAAQC,IAAIT,GAaVU,CAAgBd,IATlBL,EAAMoB,QACNlB,GAAe,EACfe,QAAQC,IAAI,kBAcRG,EAAeC,OAAOC,OAAOb,GAAQc,KAAI,SAAAC,GAAE,OAC/C,4BAAQC,IAAKD,EAAGhC,KAAMkC,UAAU,QAC9B,yBAAKC,QAASzB,EAAe0B,YAAWJ,EAAGhC,KAAMqC,IAAKL,EAAGhC,KAAMsC,IAAG,iBAAYN,EAAGhC,KAAf,UAClE,oCAAagC,EAAGhC,UAIpB,OAAQ,6BAASuC,cAAY,UAAUC,GAAG,WAAWZ,EAA7C,MCjCUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f06bb64.chunk.js","sourcesContent":["export default {\n  door: {\n    icon: \"door\",\n    samples: [\"door-lock.mp3\", \"creaky-door.mp3\"]\n  },\n  swamp: {\n    icon: \"swamp\",\n    samples: [\"swamp.mp3\"]\n  },\n  cave: {\n    icon: \"cave\",\n    samples: [\"cave.mp3\", \"cave2.mp3\"]\n  },\n  creepy: {\n    icon: \"creepy\",\n    samples: [\"creepy.mp3\", \"heartbeat.mp3\"]\n  },\n  blackKnight: {\n    icon: \"blackKnight\",\n    samples: [\"darkLaugh.mp3\"]\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\n\n import sounds from \"./sounds\";\n\nfunction App() {\n  let audio = undefined;\n  let soundPlaying = false;\n\n  const playRandomSound = (item) => {\n    const file =\n      sounds[item].samples[\n        Math.floor(Math.random() * sounds[item].samples.length)\n      ];\n    audio = new Audio(`sounds/${file}`);\n\n    audio.play();\n    soundPlaying = true;\n    console.log(file);\n  };\n\n  const stopSound = () => {\n    audio.pause();\n    soundPlaying = false;\n    console.log(\"audio stoped\");\n  };\n\n  const onFigureclick = (e) => {\n\n    const clickedSound = e.target.dataset.item;\n    if (clickedSound && !soundPlaying) {\n      playRandomSound(clickedSound);\n    } else {\n      stopSound()\n    }\n  }\n\n  \n  const listOfSounds = Object.values(sounds).map(it => \n    <figure key={it.icon} className=\"tile\">\n      <img onClick={onFigureclick} data-item={it.icon} alt={it.icon} src={`images/${it.icon}.png`} />\n      <figcaption>{it.icon}</figcaption>\n    </figure>\n  );\n\n  return  <article data-testid=\"content\" id=\"content\">{listOfSounds} </article>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}